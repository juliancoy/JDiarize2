#version 450

#define THREADS_PER_WORKGROUP 128u
#define RING_BUFFER_MAX_SIZE  4096u
#define PI 3.1415926

layout(push_constant) uniform Push {
    uint  startPos;
    uint  endPos;
    float sampleFrequency;
    float multiple;
} pc;

layout(std430, set = 0, binding = 0) readonly  buffer XBuf    { float input_buffer[]; };
layout(std430, set = 0, binding = 1) writeonly buffer MagBuf  { float output_buffer[]; };
layout(std430, set = 0, binding = 2) readonly  buffer FreqBuf { float frequency[];    };

layout (local_size_x = THREADS_PER_WORKGROUP) in;

void main() {
    uint frequency_ix = gl_WorkGroupID.x;
    uint thread_ix    = gl_LocalInvocationID.x;

    float f = frequency[frequency_ix];
    
    float normalFactor = inversesqrt(pc.multiple / f);

    uint signalReadIndex  = thread_ix + pc.startPos;
    uint signalWriteIndex = frequency_ix*(pc.endPos - pc.startPos) + thread_ix + pc.startPos; // should be length of audio data

    while (signalReadIndex < pc.endPos) {
        float x = input_buffer[signalReadIndex];

        float phase = 2.0 * PI * (float(signalReadIndex) * f) / pc.sampleFrequency;
        float c = cos(phase);
        float s = sin(phase);

        float re  =  x * c * normalFactor;
        float im  = -x * s * normalFactor;
        float mag = sqrt(re*re + im*im);

        output_buffer[signalWriteIndex] = mag;
        //output_buffer[signalWriteIndex] = ringSub;

        signalReadIndex += THREADS_PER_WORKGROUP;
        signalWriteIndex += THREADS_PER_WORKGROUP;
    }
}
