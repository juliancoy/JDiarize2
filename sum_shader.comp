#version 450
#extension GL_EXT_shader_atomic_float : require

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// set=0 is implied; add it if you prefer: layout(set = 0, binding = 0/1)
layout(binding = 0) buffer InputBuffer  { float samples[]; };
layout(binding = 1) buffer OutputBuffer { float result;   };

shared float partialSums[256];

void main() {
    uint globalIndex = gl_GlobalInvocationID.x;
    uint localIndex  = gl_LocalInvocationID.x;

    partialSums[localIndex] = 0.0;

    uint totalElements     = samples.length();
    uint elementsPerThread = (totalElements + gl_WorkGroupSize.x * gl_NumWorkGroups.x - 1) /
                             (gl_WorkGroupSize.x * gl_NumWorkGroups.x);

    uint startIndex = globalIndex * elementsPerThread;
    uint endIndex   = min(startIndex + elementsPerThread, totalElements);

    float threadSum = 0.0;
    for (uint i = startIndex; i < endIndex; i++) {
        threadSum += samples[i];
    }

    partialSums[localIndex] = threadSum;
    barrier();

    // reduce in shared memory
    for (uint stride = gl_WorkGroupSize.x / 2; stride > 0; stride >>= 1) {
        if (localIndex < stride) {
            partialSums[localIndex] += partialSums[localIndex + stride];
        }
        barrier();
    }

    if (localIndex == 0) {
        atomicAdd(result, partialSums[0]);  // requires GL_EXT_shader_atomic_float
    }
}
